/*
 * WifiStation.cpp
 *
 *  Created on: Oct 26, 2023
 *      Author: Admin
 */
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "lwip/err.h"
#include "lwip/sys.h"
#include "App_OEMType.h"



WIFIInfo WIfo;
void InitializeOEMWifiData(void)
{
	WIfo.WifiConnectState=false;
	WIfo.WifiReConnnectTimes=5;
	strcpy(WIfo.WifiName,"SZ585290-2.4G");
	strcpy(WIfo.WifiPassword,"123456789");
}


/* The examples use WiFi configuration that you can set via project configuration menu

   If you'd rather not, just change the below entries to strings with
   the config you want - ie #define EXAMPLE_WIFI_SSID "mywifissid"
*/
//#define EXAMPLE_ESP_WIFI_SSID      CONFIG_ESP_WIFI_SSID
//#define EXAMPLE_ESP_WIFI_PASS      CONFIG_ESP_WIFI_PASSWORD

#define EXAMPLE_ESP_WIFI_SSID      "SZ585290-2.4G"
#define EXAMPLE_ESP_WIFI_PASS      "123456789"

#define EXAMPLE_ESP_MAXIMUM_RETRY  CONFIG_ESP_MAXIMUM_RETRY

/* FreeRTOS event group to signal when we are connected*/
static EventGroupHandle_t s_wifi_event_group;

/* The event group allows multiple bits for each event, but we only care about two events:
 * - we are connected to the AP with an IP
 * - we failed to connect after the maximum amount of retries */
#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT      BIT1
static int s_retry_num = 0;

void IP_EVENT_Event_handler(void* arg, esp_event_base_t event_base,int32_t event_id, void* event_data)
{
    if (event_id == IP_EVENT_STA_GOT_IP)
	{
        ip_event_got_ip_t* event = (ip_event_got_ip_t*) event_data;
        s_retry_num = 0;
        xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT); //indicate event occurred
        WIfo.WifiConnectState=true;
		WIfo.CurrentStationIP=event->ip_info.ip.addr;
		printf("got ip:%d.%d.%d.%d\r\n",(unsigned char)(WIfo.CurrentStationIP&0xff),(unsigned char)((WIfo.CurrentStationIP&0xff00)>>8),(unsigned char)((WIfo.CurrentStationIP&0xff0000)>>16),
		(unsigned char)((WIfo.CurrentStationIP&0xff000000)>>24));
    }
}
void WIFI_Event_Event_Handler(void* arg, esp_event_base_t event_base,int32_t event_id, void* event_data)
{
    if (event_id == WIFI_EVENT_STA_START)
	{
        esp_wifi_connect();
    }
	else if (event_id == WIFI_EVENT_STA_DISCONNECTED)
	{
		WIfo.WifiConnectState=false;
        if (s_retry_num < WIfo.WifiReConnnectTimes)
		{
            esp_wifi_connect();
            s_retry_num++;
			printf("retry to connect to the AP..\r\n");
        }
		else
		{
            xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT); //indicate event occurred
        }
        printf("connect to the AP fail\r\n");
    }
	else if(WIFI_EVENT_STA_CONNECTED==event_id)
	{
		printf("WIFI_EVENT_STA_CONNECTED\r\n");
	}
}


void wifi_init_sta(void)
{
	InitializeOEMWifiData();
    s_wifi_event_group = xEventGroupCreate();// Creates a new RTOS event group, and returns a handle by which the newly created event group can be referenced.
    ESP_ERROR_CHECK(esp_netif_init());//Initialize the underlying TCP/IP stack.This function should be called exactly once from application code, when the application starts up.
    ESP_ERROR_CHECK(esp_event_loop_create_default());//The default event loop is a special type of loop used for system events (Wi-Fi events, for example).
    esp_netif_create_default_wifi_sta();// Creates default WIFI STA. In case of any init error this API aborts.

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));//Initialize WiFi Allocate resource for WiFi driver, such as WiFi control structure, RX/TX buffer, WiFi NVS structure etc. This WiFi also starts WiFi task.

    esp_event_handler_instance_t instance_any_id;
    esp_event_handler_instance_t instance_got_ip;
    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT,
                                                        ESP_EVENT_ANY_ID, // handler executes when any event with base WIFI_EVENT gets posted to the loopã€‚
                                                        &WIFI_Event_Event_Handler,
                                                        NULL,
                                                        &instance_any_id));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT,
                                                        IP_EVENT_STA_GOT_IP,
                                                        &IP_EVENT_Event_handler,
                                                        NULL,
                                                        &instance_got_ip));

	// Authmode threshold resets to WPA2 as default if password matches WPA2 standards (pasword len => 8).
	// If you want to connect the device to deprecated WEP/WPA networks, Please set the threshold value
	// to WIFI_AUTH_WEP/WIFI_AUTH_WPA_PSK and set the password with length and format matching to
	// WIFI_AUTH_WEP/WIFI_AUTH_WPA_PSK standards.
	wifi_config_t wifi_config;
	strcpy((char*)wifi_config.sta.ssid,WIfo.WifiName);
	strcpy((char*)wifi_config.sta.password,WIfo.WifiPassword);
	wifi_config.sta.threshold.authmode =WIFI_AUTH_OPEN;
	wifi_config.sta.sae_pwe_h2e = WPA3_SAE_PWE_BOTH;
	wifi_config.sta.bssid_set = false;
 	wifi_config.sta.pmf_cfg.capable = true;
    wifi_config.sta.pmf_cfg.required = false;


    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA) );
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config) );
    ESP_ERROR_CHECK(esp_wifi_start());
    printf("wifi_init_sta finished.\r\n");

    /* Waiting until either the connection is established (WIFI_CONNECTED_BIT) or connection failed for the maximum
     * number of re-tries (WIFI_FAIL_BIT). The bits are set by event_handler() (see above) */
    EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,
            WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,
            pdFALSE,
            pdFALSE,
            portMAX_DELAY);


    /* xEventGroupWaitBits() returns the bits before the call returned, hence we can test which event actually
     * happened. */
    if (bits & WIFI_CONNECTED_BIT)
	{
        printf("connected to ap SSID:%s password:%s\r\n", EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
		xTaskCreate(Tcp_Client_Connect_Task, "Tcp_Client_Connect_Task", 4096, NULL, 5, NULL);
    }
	else if (bits & WIFI_FAIL_BIT)
	{
        printf("Failed to connect to SSID:%s, password:%s\r\n",EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
    }
	else
	{
        printf("UNEXPECTED EVENT\r\n");
    }
}


// 绂炬湪绉戞妧鈥斺�攂tn鎸夋壄鎺т欢渚嬬▼
// https://hemukeji.taobao.com/
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "lvgl/demos/lv_demos.h"
#include "lvgl_helpers.h"
#include "esp_freertos_hooks.h"
#include "esp_log.h"
#include "lvgl/src/hal/lv_hal_tick.h"
#include "App_OEMType.h"


#include "who_lcd.h"

static bool LVGLStart=false;

static QueueHandle_t xQueueFrameIsang = NULL;
static QueueHandle_t xQueueFrameOsang = NULL;
static bool gReturnFBsang = true;



#define TAG "hemukeji.taobao.com"
static lv_obj_t *imgCamera;
static lv_obj_t *labelDisplayName;



extern const lv_img_dsc_t myimg;
LV_FONT_DECLARE(myfont);
LV_IMG_DECLARE(myimg);

SemaphoreHandle_t xGuiSemaphore;    // 鍒涘缓涓�涓狦UI淇″彿閲�
static void lv_tick_task(void *arg) // LVGL 鏃堕挓浠诲姟
{
   (void)arg;
   lv_tick_inc(10);
}
// Button1浜嬩欢 姝ｅ父鎸夐挳
static void button1_event_handler(lv_obj_t * obj, lv_event_t event)
{
	
		ESP_LOGI(TAG,"button1_pressed\n");// 鎸変笅
	
}
void image_ready_callback(lv_event_t * e) 
{
    lv_obj_t * img = lv_event_get_target(e);
    /* 鍥惧儚鍑嗗濂藉悗鎵ц鐨勬搷浣� */
    printf("鍥惧儚鍑嗗瀹屾瘯\n");
}

static void lvgl_task(void *arg) // GUI浠诲姟
{
   xGuiSemaphore = xSemaphoreCreateMutex(); // 鍒涘缓GUI淇″彿閲�
   lv_init();                               // lvgl鍒濆鍖�
   lvgl_driver_init();                      // 鍒濆鍖栨恫鏅堕┍鍔�
   //memset(BufferT,0x55,320*240*8);

   /* Example for 1) */
   static lv_disp_draw_buf_t draw_buf;
   // 鍒濆鍖栫紦瀛�
   printf("sang:DISP_BUF_SIZE:%d--\r\n",DISP_BUF_SIZE);
	lv_color_t *buf1 = heap_caps_malloc(DISP_BUF_SIZE * 2, MALLOC_CAP_SPIRAM);
	lv_color_t *buf2 = heap_caps_malloc(DISP_BUF_SIZE * 2, MALLOC_CAP_SPIRAM);
	// lv_color_t *buf1 = heap_caps_malloc(DISP_BUF_SIZE * 2, MALLOC_CAP_DMA);
	// lv_color_t *buf2 = heap_caps_malloc(DISP_BUF_SIZE * 2, MALLOC_CAP_DMA);

   // 娣诲姞骞舵敞鍐岃Е鎽搁┍鍔�
   lv_disp_draw_buf_init(&draw_buf, buf1, buf2, LV_HOR_RES_MAX * LV_VER_RES_MAX); /*Initialize the display buffer*/

   static lv_disp_drv_t disp_drv;         /*A variable to hold the drivers. Must be static or global.*/
   lv_disp_drv_init(&disp_drv);           /*Basic initialization*/
   disp_drv.draw_buf = &draw_buf;         /*Set an initialized buffer*/
   disp_drv.flush_cb = disp_driver_flush; /*Set a flush callback to draw to the display*/
   disp_drv.hor_res = 320;                /*Set the horizontal resolution in pixels*/
   disp_drv.ver_res = 240;                /*Set the vertical resolution in pixels*/
   lv_disp_drv_register(&disp_drv);       /*Register the driver and save the created display objects*/
                                          /*瑙︽懜灞忚緭鍏ユ帴鍙ｉ厤缃�*/
   lv_indev_drv_t indev_drv;
   lv_indev_drv_init(&indev_drv);
   indev_drv.read_cb = touch_driver_read;
   indev_drv.type = LV_INDEV_TYPE_POINTER;
   lv_indev_drv_register(&indev_drv);

   /* 鍒涘缓涓�涓�10ms瀹氭椂鍣�*/ // 瀹氭湡澶勭悊GUI鍥炶皟
   const esp_timer_create_args_t periodic_timer_args = {
       .callback = &lv_tick_task,
       .name = "periodic_gui"};
   esp_timer_handle_t periodic_timer;
   ESP_ERROR_CHECK(esp_timer_create(&periodic_timer_args, &periodic_timer));
   ESP_ERROR_CHECK(esp_timer_start_periodic(periodic_timer, 10 * 1000));



	imgCamera=lv_img_create(lv_scr_act());//鍒涘缓鍥剧墖鎺т欢
	lv_obj_set_pos(imgCamera,0,0);
	lv_obj_set_size(imgCamera, 320, 240); //璁剧疆澶у皬
	
	
	lv_img_set_src(imgCamera,&myimg);//璁剧疆鍥剧墖婧�
	vTaskDelay(pdMS_TO_TICKS(5000));
	LVGLStart=true;
//	lv_obj_del(imgCamera);//鍒犻櫎鍥剧墖
	
	static lv_obj_t *default_src;
	default_src = lv_scr_act(); 					// 鑾峰彇榛樿灞忓箷
	labelDisplayName = lv_label_create(default_src); /// 鍦ㄤ富灞忓箷鍒涘缓涓�涓爣绛�

	//lv_label_set_text(labelDisplayName,"绂炬湪绉戞妧");//涓枃鍐呭
	lv_obj_align(labelDisplayName, LV_ALIGN_TOP_MID, 0, 0); // 浣嶇疆
	lv_obj_set_style_text_color(labelDisplayName, lv_color_hex(0xFFFFFF), LV_STATE_DEFAULT);
	lv_obj_set_style_bg_color(labelDisplayName, lv_color_hex(0xff00000), LV_STATE_DEFAULT);
	lv_obj_set_style_bg_opa(labelDisplayName, 100, LV_STATE_DEFAULT);

   lv_style_t mystyle;
   lv_style_init(&mystyle);
   lv_style_set_text_font(&mystyle,&myfont); //寮曠敤瀛楀簱
   lv_obj_add_style(labelDisplayName, &mystyle, 0);
   

   while (1)
   {
      /* Delay 1 tick (assumes FreeRTOS tick is 10ms */
      vTaskDelay(pdMS_TO_TICKS(10));

      /* Try to take the semaphore, call lvgl related function on success */
      if (pdTRUE == xSemaphoreTake(xGuiSemaphore, portMAX_DELAY))
      {
         lv_timer_handler();            // 澶勭悊LVGL浠诲姟
         xSemaphoreGive(xGuiSemaphore); // 閲婃斁淇″彿閲�
      }
   }
}
void LVGL_app_main(void)
{

   // 浠诲姟鍒涘缓
   xTaskCreatePinnedToCore(lvgl_task, "gui task", 1024 * 4, NULL, 1, NULL, 0);

}




static void Ltask_process_handler(void *arg)
{
    camera_fb_t *frame = NULL;
	printf("sang:Ltask_process_handler\r\n");
    while (true)
    {
        if (xQueueReceive(xQueueFrameIsang, &frame, portMAX_DELAY))
        {
           // g_lcd_sang.draw_bitmap(0, 0, frame->width, frame->height, (uint16_t *)frame->buf);
		//	lv_img_set_src(imgCamera,frame->buf);//璁剧疆鍥剧墖婧�
			if(LVGLStart)
			//if(0)
			{
				//LVGLStart=0;
				lv_img_dsc_t img_dsc;
				img_dsc.header.cf =LV_IMG_CF_TRUE_COLOR;
				img_dsc.header.always_zero = 0;
				img_dsc.header.reserved = 0,
				img_dsc.header.w = frame->width;
				img_dsc.header.h = frame->height;
				img_dsc.data_size = frame->len;
				uint16_t t;
			    uint16_t *_p = (uint16_t *)frame->buf;
			    for (size_t i = 0; i < frame->len/2; i++)
				{
			            t = *_p;
			            *_p = t >> 8 | t << 8;
			            _p++;
			    }
				img_dsc.data = (const uint8_t*)frame->buf;
				lv_img_set_src(imgCamera, &img_dsc);
				lv_label_set_text(labelDisplayName,"妗戝瓙閲� 鎵撳崱鎴愬姛!");//涓枃鍐呭
				vTaskDelay(pdMS_TO_TICKS(50));
				
				//printf("sang:frame width:%d,%d\r\n",frame->width,frame->height);
			}
			
			//printf("sang:frame width:%d,%d\r\n",frame->width,frame->height);
            if (xQueueFrameOsang)
            {
                xQueueSend(xQueueFrameOsang, &frame, portMAX_DELAY);
            }
            else if (gReturnFBsang)
            {
                esp_camera_fb_return(frame);
            }
            else
            {
                free(frame);
            }
        }
    }

} 

esp_err_t register_lcd_sang(const QueueHandle_t frame_i, const QueueHandle_t frame_o, const bool return_fb)
{
/*

	register_lcd(frame_i, frame_o, true);
	return ESP_OK;

    spi_config_t bus_conf = {
        .miso_io_num = BOARD_LCD_MISO,
        .mosi_io_num = BOARD_LCD_MOSI,
        .sclk_io_num = BOARD_LCD_SCK,
        .max_transfer_sz = 2 * 320 * 240 + 10,//WANG
    };
    spi_bus_handle_t spi_bus = spi_bus_create(SPI2_HOST, &bus_conf);

    scr_interface_spi_config_t spi_lcd_cfg = {
        .spi_bus = spi_bus,
        .pin_num_cs = BOARD_LCD_CS,
        .pin_num_dc = BOARD_LCD_DC,
        .clk_freq = 40 * 1000000,
        .swap_data = 0,
    };

    scr_interface_driver_t *iface_drv;
    scr_interface_create(SCREEN_IFACE_SPI, &spi_lcd_cfg, &iface_drv);
    esp_err_t ret = scr_find_driver(SCREEN_CONTROLLER_ST7789, &g_lcd_sang);
    if (ESP_OK != ret)
    {
        return ret;
        ESP_LOGE(TAG, "screen find failed");
    }

    scr_controller_config_t lcd_cfg = {
        .interface_drv = iface_drv,
        .pin_num_rst = BOARD_LCD_RST,
        .pin_num_bckl = BOARD_LCD_BL,
        .rst_active_level = 0,
        .bckl_active_level = 0,
        .offset_hor = 0,
        .offset_ver = 0,
        .width = 240,
        .height = 320,
        .rotate = SCR_DIR_BTLR,
    };
    ret = g_lcd_sang.init(&lcd_cfg);
    if (ESP_OK != ret)
    {
        return ESP_FAIL;
        ESP_LOGE(TAG, "screen initialize failed");
    }

    g_lcd_sang.get_info(&g_lcd_info_sang);
    ESP_LOGI(TAG, "Screen name:%s | width:%d | height:%d", g_lcd_info_sang.name, g_lcd_info_sang.width, g_lcd_info_sang.height);

    app_lcd_set_color(0x000000);
    vTaskDelay(pdMS_TO_TICKS(200));
	*/
   // app_lcd_draw_wallpaper();
    //vTaskDelay(pdMS_TO_TICKS(200));

    xQueueFrameIsang = frame_i;
    xQueueFrameOsang = frame_o;
    gReturnFBsang = return_fb;

	
    xTaskCreatePinnedToCore(Ltask_process_handler, TAG, 4 * 1024, NULL, 5, NULL, 0);

    return ESP_OK;
}


static QueueHandle_t xQueueFrameO_Csang = NULL;

static void Ctask_process_handler(void *arg)
{
    while (false)
    {
        camera_fb_t *fb = esp_camera_fb_get();
        if (fb)
        {
          //  xQueueSend(xQueueFrameO, &frame, portMAX_DELAY);
          	lv_img_dsc_t img_dsc;
		  	img_dsc.header.cf = LV_IMG_CF_RGB565;
 			img_dsc.header.always_zero = 0;
            img_dsc.header.w = fb->width;
            img_dsc.header.h = fb->height;
            img_dsc.data_size = fb->len;
            img_dsc.data = fb->buf;
            lv_img_set_src(imgCamera, &img_dsc);
        // vTaskDelay(1000/portTICK_PERIOD_MS);
		
          printf("sang:frame width:%d,height:%d\r\n",fb->width,fb->height);
		
		  //lv_obj_add_event_cb(imgCamera, image_ready_callback, LV_EVENT_READY, NULL); /* 娉ㄥ唽浜嬩欢澶勭悊鍑芥暟 */
		   esp_camera_fb_return(fb);
		
		  
        }
		else
		{
			vTaskDelay(100/portTICK_PERIOD_MS);
			printf("1");
		}
    }

	while (true)
    {
        camera_fb_t *frame = esp_camera_fb_get();
        if (frame)
        {
        	//printf("sang:frame->len:%d\r\n",frame->len);
            xQueueSend(xQueueFrameO_Csang, &frame, portMAX_DELAY);
			//printf("sang:frame->len:%d,frame->width:%d,frame->height:%d\r\n",frame->len,frame->width,frame->height);
			//esp_camera_fb_return(frame);
        }
    }
}


void register_camera_LVGL(const pixformat_t pixel_fromat,
                     const framesize_t frame_size,
                     const uint8_t fb_count,
                 		const QueueHandle_t frame_o)
{
    printf("Camera module is %s\r\n", CAMERA_MODULE_NAME);

#if CONFIG_CAMERA_MODULE_ESP_EYE || CONFIG_CAMERA_MODULE_ESP32_CAM_BOARD
    /* IO13, IO14 is designed for JTAG by default,
     * to use it as generalized input,
     * firstly declair it as pullup input */
    gpio_config_t conf;
    conf.mode = GPIO_MODE_INPUT;
    conf.pull_up_en = GPIO_PULLUP_ENABLE;
    conf.pull_down_en = GPIO_PULLDOWN_DISABLE;
    conf.intr_type = GPIO_INTR_DISABLE;
    conf.pin_bit_mask = 1LL << 13;
    gpio_config(&conf);
    conf.pin_bit_mask = 1LL << 14;
    gpio_config(&conf);
#endif

    camera_config_t config;
    config.ledc_channel = LEDC_CHANNEL_0;
    config.ledc_timer = LEDC_TIMER_0;
    config.pin_d0 = CAMERA_PIN_D0;
    config.pin_d1 = CAMERA_PIN_D1;
    config.pin_d2 = CAMERA_PIN_D2;
    config.pin_d3 = CAMERA_PIN_D3;
    config.pin_d4 = CAMERA_PIN_D4;
    config.pin_d5 = CAMERA_PIN_D5;
    config.pin_d6 = CAMERA_PIN_D6;
    config.pin_d7 = CAMERA_PIN_D7;
    config.pin_xclk = CAMERA_PIN_XCLK;
    config.pin_pclk = CAMERA_PIN_PCLK;
    config.pin_vsync = CAMERA_PIN_VSYNC;
    config.pin_href = CAMERA_PIN_HREF;
    config.pin_sscb_sda = CAMERA_PIN_SIOD;
    config.pin_sscb_scl = CAMERA_PIN_SIOC;
    config.pin_pwdn = CAMERA_PIN_PWDN;
    config.pin_reset = CAMERA_PIN_RESET;
    config.xclk_freq_hz = XCLK_FREQ_HZ;
    config.pixel_format = pixel_fromat;
    config.frame_size = frame_size;
    config.jpeg_quality = 12;
    config.fb_count = fb_count;
    config.fb_location = CAMERA_FB_IN_PSRAM;
    config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;

    // camera init
    esp_err_t err = esp_camera_init(&config);
    if (err != ESP_OK)
    {
        ESP_LOGE(TAG, "Camera init failed with error 0x%x", err);
        return;
    }

    sensor_t *s = esp_camera_sensor_get();
    s->set_vflip(s, 0); //flip it back
    printf("camera PID:%d\r\n",s->id.PID);
    s->set_hmirror(s, 1);
    //initial sensors are flipped vertically and colors are a bit saturated
    if (s->id.PID == OV3660_PID)
    {
        s->set_brightness(s, 1);  //up the blightness just a bit
        s->set_saturation(s, -2); //lower the saturation
    }

    xQueueFrameO_Csang = frame_o;
    xTaskCreatePinnedToCore(Ctask_process_handler, TAG, 2 * 1024, NULL, 5, NULL, 1);

  
}



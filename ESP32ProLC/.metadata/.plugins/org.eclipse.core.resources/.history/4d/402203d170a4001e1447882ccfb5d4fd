/*
 * APP_SocketClient.cpp
 *
 *  Created on: Nov 20, 2023
 *      Author: sang
 */
/* BSD Socket API Example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <string.h>
#include <sys/param.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_netif.h"
#include "lwip/err.h"
#include "lwip/sockets.h"
#include "APP_OEMType.h"
#include ""
#include "esp_event_loop.h"
#include "sdkconfig.h"
#include "mdns.h"


SocketClientInstance SCI;

static void state_task(void *pvParameters)
{
	static char InfoBuffer[512] = {0};
	while (1)
	{
		printf("--------------- Heap free size total:%ld---------------------\r\n", (long)esp_get_free_heap_size());
		printf("--------------- heap free size PSRAM:%d---------------------\r\n", (int)heap_caps_get_free_size( MALLOC_CAP_SPIRAM ));
		printf("--------------- heap free size in processor:%ld---------------------\r\n",(long)esp_get_free_internal_heap_size());
	    vTaskList((char *) &InfoBuffer);
		printf("Task Name  state priority free_size task_number Core_number\r\n");
		printf("\r\n%s\r\n", InfoBuffer);
        vTaskDelay(20000 / portTICK_PERIOD_MS);
	}
}
void TCP_Client_Receive_Data_Task(void *pvParameters)
{
	
	int len;
	while(1)
	{
		len = recv(SCI.sockID, SCI.ReceiveBuffer, MAXSocketClientRevSize - 1, 0);
		if (len < 0)
		{ 
            printf("recv failed: errno %d\r\n", errno);
			if((errno == EINTR || errno == EWOULDBLOCK || errno == EAGAIN))
			{
				printf("recv continue\r\n");
				continue;
			}
			else
			{
				printf("recv close..\r\n");
				shutdown(SCI.sockID, 0);
				closesocket(SCI.sockID);
				vTaskDelete(NULL);
				return;
			}
		}
		else 
		{
			printf("Received %d bytes\r\n", len);
		}
	}
}
void Tcp_Client_Connect_Task(void *pvParameters)
{
	strcpy(SCI.HostIPAddress,"192.168.5.14");
	SCI.Port=9100;
	SCI.SocketClientConnectedState=false;
	struct sockaddr_in dest_addr;
	dest_addr.sin_addr.s_addr = inet_addr(SCI.HostIPAddress);
	dest_addr.sin_family = AF_INET;
	dest_addr.sin_port = htons(SCI.Port);
	
	SCI.sockID =  socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
	if (SCI.sockID < 0) 
	{
		printf("Unable to create socket: errno %d\r\n",errno);
		vTaskDelete(NULL);
	}
	printf("Socket created, connecting to %s:%d.....\r\n", SCI.HostIPAddress, SCI.Port);
	int err = connect(SCI.sockID, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr_in));
	if (err != 0)
	{
		printf("Socket unable to connect: errno %d\r\n", errno);
		vTaskDelete(NULL);
	}
	printf("Successfully connected!!\r\n");
	SCI.SocketClientConnectedState=true;
	xTaskCreatePinnedToCore(&TCP_Client_Receive_Data_Task, "TCP_Client_Receive_Data_Task", 2048, NULL, 2, NULL, 1);
    vTaskDelete(NULL);
}


/* The examples use WiFi configuration that you can set via 'make menuconfig'.

   If you'd rather not, just change the below entries to strings with
   the config you want - ie #define EXAMPLE_WIFI_SSID "mywifissid"
*/
#define EXAMPLE_ESP_WIFI_SSID CONFIG_ESP_WIFI_SSID
#define EXAMPLE_ESP_WIFI_PASS CONFIG_ESP_WIFI_PASSWORD
#define EXAMPLE_ESP_MAXIMUM_RETRY CONFIG_ESP_MAXIMUM_RETRY
#define EXAMPLE_ESP_WIFI_AP_SSID CONFIG_ESP_WIFI_AP_SSID
#define EXAMPLE_ESP_WIFI_AP_PASS CONFIG_ESP_WIFI_AP_PASSWORD
#define EXAMPLE_MAX_STA_CONN CONFIG_MAX_STA_CONN
#define EXAMPLE_IP_ADDR CONFIG_SERVER_IP
#define EXAMPLE_ESP_WIFI_AP_CHANNEL CONFIG_ESP_WIFI_AP_CHANNEL


typedef struct
{
	bool WifiConnectedState;		
	uint32_t CurrentStationIP;

}WifiConnectState;
WifiConnectState WCS;


//static const char *TAG = "Sang:camera wifi";
static int s_retry_num = 0;
static esp_err_t event_handler_Sang(void *ctx, system_event_t *event)
{
    switch (event->event_id)
    {
    case SYSTEM_EVENT_AP_STACONNECTED:
      //  ESP_LOGI(TAG, "station:" MACSTR " join, AID=%d",MAC2STR(event->event_info.sta_connected.mac),event->event_info.sta_connected.aid);
        break;
    case SYSTEM_EVENT_AP_STADISCONNECTED:
       // ESP_LOGI(TAG, "station:" MACSTR "leave, AID=%d",MAC2STR(event->event_info.sta_disconnected.mac),event->event_info.sta_disconnected.aid);
        break;
    case SYSTEM_EVENT_STA_START:
        esp_wifi_connect();
        break;
    case SYSTEM_EVENT_STA_GOT_IP:
       // ESP_LOGI(TAG, "AAAAgot ip:%s",ip4addr_ntoa(&event->event_info.got_ip.ip_info.ip));
        s_retry_num = 0;
		WCS.WifiConnectedState=true;
		//WCS.CurrentStationIP=&event->event_info.got_ip.ip_info.ip.addr;
        break;
	case WIFI_EVENT_STA_CONNECTED:
		printf("WIFI_EVENT_STA_CONNECTED!\r\n");
		break;
    case SYSTEM_EVENT_STA_DISCONNECTED:
    {
        if (s_retry_num < EXAMPLE_ESP_MAXIMUM_RETRY)
        {
            esp_wifi_connect();
            s_retry_num++;
            //ESP_LOGI(TAG, "retry to connect to the AP");
        }
        //ESP_LOGI(TAG, "connect to the AP fail");
		WCS.WifiConnectedState=false;
        break;
    }
    default:
        break;
    }
    mdns_handle_system_event(ctx, event);
    return ESP_OK;
}



void wifi_init_sta_sang()
{
    wifi_config_t wifi_config;
    memset(&wifi_config, 0, sizeof(wifi_config_t));
    snprintf((char *)wifi_config.sta.ssid, 32, "%s", EXAMPLE_ESP_WIFI_SSID);
    snprintf((char *)wifi_config.sta.password, 64, "%s", EXAMPLE_ESP_WIFI_PASS);

    ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config));

   // ESP_LOGI(TAG, "wifi_init_sta finished.");
  // ESP_LOGI(TAG, "connect to ap SSID:%s password:%s", EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);
}

void app_wifi_main_sang(void)
{
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    wifi_mode_t mode = WIFI_MODE_NULL;
    mode = WIFI_MODE_STA;
/*
    if (strlen(EXAMPLE_ESP_WIFI_AP_SSID) && strlen(EXAMPLE_ESP_WIFI_SSID))
    {
        mode = WIFI_MODE_APSTA;
    }
    else if (strlen(EXAMPLE_ESP_WIFI_AP_SSID))
    {
        mode = WIFI_MODE_AP;
    }
    else if (strlen(EXAMPLE_ESP_WIFI_SSID))
    {
        mode = WIFI_MODE_STA;
    }
    */
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)
    {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    if (mode == WIFI_MODE_NULL)
    {
        //ESP_LOGW(TAG, "Neither AP or STA have been configured. WiFi will be off.");
        return;
    }

    tcpip_adapter_init();
    ESP_ERROR_CHECK(esp_event_loop_init(event_handler_Sang, NULL));
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));
    ESP_ERROR_CHECK(esp_wifi_set_mode(mode));
/*
    if (mode & WIFI_MODE_AP)
    {
        wifi_init_softap();
    }
*/
    if (mode & WIFI_MODE_STA)
    {
        wifi_init_sta_sang();
    }
    ESP_ERROR_CHECK(esp_wifi_start());
    ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));
}




